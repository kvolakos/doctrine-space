# Generated by Django 2.1.4 on 2018-12-09 21:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agtagents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agentid', models.IntegerField(db_column='agentID')),
                ('divisionid', models.IntegerField(blank=True, db_column='divisionID', null=True)),
                ('corporationid', models.IntegerField(blank=True, db_column='corporationID', null=True)),
                ('locationid', models.IntegerField(blank=True, db_column='locationID', null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('quality', models.IntegerField(blank=True, null=True)),
                ('agenttypeid', models.IntegerField(blank=True, db_column='agentTypeID', null=True)),
                ('islocator', models.BooleanField(blank=True, db_column='isLocator', null=True)),
            ],
            options={
                'db_table': 'agtAgents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Agtagenttypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agenttypeid', models.IntegerField(db_column='agentTypeID')),
                ('agenttype', models.CharField(blank=True, db_column='agentType', max_length=50, null=True)),
            ],
            options={
                'db_table': 'agtAgentTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Agtresearchagents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agentid', models.IntegerField(db_column='agentID')),
                ('typeid', models.IntegerField(db_column='typeID')),
            ],
            options={
                'db_table': 'agtResearchAgents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Certcerts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certid', models.IntegerField(db_column='certID')),
                ('description', models.TextField(blank=True, null=True)),
                ('groupid', models.IntegerField(blank=True, db_column='groupID', null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'certCerts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Certmasteries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('masterylevel', models.IntegerField(blank=True, db_column='masteryLevel', null=True)),
                ('certid', models.IntegerField(blank=True, db_column='certID', null=True)),
            ],
            options={
                'db_table': 'certMasteries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Certskills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certid', models.IntegerField(blank=True, db_column='certID', null=True)),
                ('skillid', models.IntegerField(blank=True, db_column='skillID', null=True)),
                ('certlevelint', models.IntegerField(blank=True, db_column='certLevelInt', null=True)),
                ('skilllevel', models.IntegerField(blank=True, db_column='skillLevel', null=True)),
                ('certleveltext', models.CharField(blank=True, db_column='certLevelText', max_length=8, null=True)),
            ],
            options={
                'db_table': 'certSkills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chrancestries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ancestryid', models.IntegerField(db_column='ancestryID')),
                ('ancestryname', models.CharField(blank=True, db_column='ancestryName', max_length=100, null=True)),
                ('bloodlineid', models.IntegerField(blank=True, db_column='bloodlineID', null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('perception', models.IntegerField(blank=True, null=True)),
                ('willpower', models.IntegerField(blank=True, null=True)),
                ('charisma', models.IntegerField(blank=True, null=True)),
                ('memory', models.IntegerField(blank=True, null=True)),
                ('intelligence', models.IntegerField(blank=True, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('shortdescription', models.CharField(blank=True, db_column='shortDescription', max_length=500, null=True)),
            ],
            options={
                'db_table': 'chrAncestries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chrattributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributeid', models.IntegerField(db_column='attributeID')),
                ('attributename', models.CharField(blank=True, db_column='attributeName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('shortdescription', models.CharField(blank=True, db_column='shortDescription', max_length=500, null=True)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'chrAttributes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chrbloodlines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bloodlineid', models.IntegerField(db_column='bloodlineID')),
                ('bloodlinename', models.CharField(blank=True, db_column='bloodlineName', max_length=100, null=True)),
                ('raceid', models.IntegerField(blank=True, db_column='raceID', null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('maledescription', models.CharField(blank=True, db_column='maleDescription', max_length=1000, null=True)),
                ('femaledescription', models.CharField(blank=True, db_column='femaleDescription', max_length=1000, null=True)),
                ('shiptypeid', models.IntegerField(blank=True, db_column='shipTypeID', null=True)),
                ('corporationid', models.IntegerField(blank=True, db_column='corporationID', null=True)),
                ('perception', models.IntegerField(blank=True, null=True)),
                ('willpower', models.IntegerField(blank=True, null=True)),
                ('charisma', models.IntegerField(blank=True, null=True)),
                ('memory', models.IntegerField(blank=True, null=True)),
                ('intelligence', models.IntegerField(blank=True, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('shortdescription', models.CharField(blank=True, db_column='shortDescription', max_length=500, null=True)),
                ('shortmaledescription', models.CharField(blank=True, db_column='shortMaleDescription', max_length=500, null=True)),
                ('shortfemaledescription', models.CharField(blank=True, db_column='shortFemaleDescription', max_length=500, null=True)),
            ],
            options={
                'db_table': 'chrBloodlines',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chrfactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factionid', models.IntegerField(db_column='factionID')),
                ('factionname', models.CharField(blank=True, db_column='factionName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('raceids', models.IntegerField(blank=True, db_column='raceIDs', null=True)),
                ('solarsystemid', models.IntegerField(blank=True, db_column='solarSystemID', null=True)),
                ('corporationid', models.IntegerField(blank=True, db_column='corporationID', null=True)),
                ('sizefactor', models.TextField(blank=True, db_column='sizeFactor', null=True)),
                ('stationcount', models.IntegerField(blank=True, db_column='stationCount', null=True)),
                ('stationsystemcount', models.IntegerField(blank=True, db_column='stationSystemCount', null=True)),
                ('militiacorporationid', models.IntegerField(blank=True, db_column='militiaCorporationID', null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
            ],
            options={
                'db_table': 'chrFactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chrraces',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raceid', models.IntegerField(db_column='raceID')),
                ('racename', models.CharField(blank=True, db_column='raceName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('shortdescription', models.CharField(blank=True, db_column='shortDescription', max_length=500, null=True)),
            ],
            options={
                'db_table': 'chrRaces',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpactivities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityid', models.IntegerField(db_column='activityID')),
                ('activityname', models.CharField(blank=True, db_column='activityName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'crpActivities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpnpccorporationdivisions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporationid', models.IntegerField(db_column='corporationID')),
                ('divisionid', models.IntegerField(db_column='divisionID')),
                ('size', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'crpNPCCorporationDivisions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpnpccorporationresearchfields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skillid', models.IntegerField(db_column='skillID')),
                ('corporationid', models.IntegerField(db_column='corporationID')),
            ],
            options={
                'db_table': 'crpNPCCorporationResearchFields',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpnpccorporations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporationid', models.IntegerField(db_column='corporationID')),
                ('size', models.CharField(blank=True, max_length=1, null=True)),
                ('extent', models.CharField(blank=True, max_length=1, null=True)),
                ('solarsystemid', models.IntegerField(blank=True, db_column='solarSystemID', null=True)),
                ('investorid1', models.IntegerField(blank=True, db_column='investorID1', null=True)),
                ('investorshares1', models.IntegerField(blank=True, db_column='investorShares1', null=True)),
                ('investorid2', models.IntegerField(blank=True, db_column='investorID2', null=True)),
                ('investorshares2', models.IntegerField(blank=True, db_column='investorShares2', null=True)),
                ('investorid3', models.IntegerField(blank=True, db_column='investorID3', null=True)),
                ('investorshares3', models.IntegerField(blank=True, db_column='investorShares3', null=True)),
                ('investorid4', models.IntegerField(blank=True, db_column='investorID4', null=True)),
                ('investorshares4', models.IntegerField(blank=True, db_column='investorShares4', null=True)),
                ('friendid', models.IntegerField(blank=True, db_column='friendID', null=True)),
                ('enemyid', models.IntegerField(blank=True, db_column='enemyID', null=True)),
                ('publicshares', models.IntegerField(blank=True, db_column='publicShares', null=True)),
                ('initialprice', models.IntegerField(blank=True, db_column='initialPrice', null=True)),
                ('minsecurity', models.TextField(blank=True, db_column='minSecurity', null=True)),
                ('scattered', models.BooleanField(blank=True, null=True)),
                ('fringe', models.IntegerField(blank=True, null=True)),
                ('corridor', models.IntegerField(blank=True, null=True)),
                ('hub', models.IntegerField(blank=True, null=True)),
                ('border', models.IntegerField(blank=True, null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
                ('sizefactor', models.TextField(blank=True, db_column='sizeFactor', null=True)),
                ('stationcount', models.IntegerField(blank=True, db_column='stationCount', null=True)),
                ('stationsystemcount', models.IntegerField(blank=True, db_column='stationSystemCount', null=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
            ],
            options={
                'db_table': 'crpNPCCorporations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpnpccorporationtrades',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporationid', models.IntegerField(db_column='corporationID')),
                ('typeid', models.IntegerField(db_column='typeID')),
            ],
            options={
                'db_table': 'crpNPCCorporationTrades',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crpnpcdivisions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('divisionid', models.IntegerField(db_column='divisionID')),
                ('divisionname', models.CharField(blank=True, db_column='divisionName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('leadertype', models.CharField(blank=True, db_column='leaderType', max_length=100, null=True)),
            ],
            options={
                'db_table': 'crpNPCDivisions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmattributecategories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoryid', models.IntegerField(db_column='categoryID')),
                ('categoryname', models.CharField(blank=True, db_column='categoryName', max_length=50, null=True)),
                ('categorydescription', models.CharField(blank=True, db_column='categoryDescription', max_length=200, null=True)),
            ],
            options={
                'db_table': 'dgmAttributeCategories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmattributetypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributeid', models.IntegerField(db_column='attributeID')),
                ('attributename', models.CharField(blank=True, db_column='attributeName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('defaultvalue', models.TextField(blank=True, db_column='defaultValue', null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
                ('displayname', models.CharField(blank=True, db_column='displayName', max_length=150, null=True)),
                ('unitid', models.IntegerField(blank=True, db_column='unitID', null=True)),
                ('stackable', models.BooleanField(blank=True, null=True)),
                ('highisgood', models.BooleanField(blank=True, db_column='highIsGood', null=True)),
                ('categoryid', models.IntegerField(blank=True, db_column='categoryID', null=True)),
            ],
            options={
                'db_table': 'dgmAttributeTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmeffects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effectid', models.IntegerField(db_column='effectID')),
                ('effectname', models.CharField(blank=True, db_column='effectName', max_length=400, null=True)),
                ('effectcategory', models.IntegerField(blank=True, db_column='effectCategory', null=True)),
                ('preexpression', models.IntegerField(blank=True, db_column='preExpression', null=True)),
                ('postexpression', models.IntegerField(blank=True, db_column='postExpression', null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('guid', models.CharField(blank=True, max_length=60, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('isoffensive', models.BooleanField(blank=True, db_column='isOffensive', null=True)),
                ('isassistance', models.BooleanField(blank=True, db_column='isAssistance', null=True)),
                ('durationattributeid', models.IntegerField(blank=True, db_column='durationAttributeID', null=True)),
                ('trackingspeedattributeid', models.IntegerField(blank=True, db_column='trackingSpeedAttributeID', null=True)),
                ('dischargeattributeid', models.IntegerField(blank=True, db_column='dischargeAttributeID', null=True)),
                ('rangeattributeid', models.IntegerField(blank=True, db_column='rangeAttributeID', null=True)),
                ('falloffattributeid', models.IntegerField(blank=True, db_column='falloffAttributeID', null=True)),
                ('disallowautorepeat', models.BooleanField(blank=True, db_column='disallowAutoRepeat', null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
                ('displayname', models.CharField(blank=True, db_column='displayName', max_length=100, null=True)),
                ('iswarpsafe', models.BooleanField(blank=True, db_column='isWarpSafe', null=True)),
                ('rangechance', models.BooleanField(blank=True, db_column='rangeChance', null=True)),
                ('electronicchance', models.BooleanField(blank=True, db_column='electronicChance', null=True)),
                ('propulsionchance', models.BooleanField(blank=True, db_column='propulsionChance', null=True)),
                ('distribution', models.IntegerField(blank=True, null=True)),
                ('sfxname', models.CharField(blank=True, db_column='sfxName', max_length=20, null=True)),
                ('npcusagechanceattributeid', models.IntegerField(blank=True, db_column='npcUsageChanceAttributeID', null=True)),
                ('npcactivationchanceattributeid', models.IntegerField(blank=True, db_column='npcActivationChanceAttributeID', null=True)),
                ('fittingusagechanceattributeid', models.IntegerField(blank=True, db_column='fittingUsageChanceAttributeID', null=True)),
                ('modifierinfo', models.TextField(blank=True, db_column='modifierInfo', null=True)),
            ],
            options={
                'db_table': 'dgmEffects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmexpressions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expressionid', models.IntegerField(db_column='expressionID')),
                ('operandid', models.IntegerField(blank=True, db_column='operandID', null=True)),
                ('arg1', models.IntegerField(blank=True, null=True)),
                ('arg2', models.IntegerField(blank=True, null=True)),
                ('expressionvalue', models.CharField(blank=True, db_column='expressionValue', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('expressionname', models.CharField(blank=True, db_column='expressionName', max_length=500, null=True)),
                ('expressiontypeid', models.IntegerField(blank=True, db_column='expressionTypeID', null=True)),
                ('expressiongroupid', models.IntegerField(blank=True, db_column='expressionGroupID', null=True)),
                ('expressionattributeid', models.IntegerField(blank=True, db_column='expressionAttributeID', null=True)),
            ],
            options={
                'db_table': 'dgmExpressions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmtypeattributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('attributeid', models.IntegerField(db_column='attributeID')),
                ('valueint', models.IntegerField(blank=True, db_column='valueInt', null=True)),
                ('valuefloat', models.TextField(blank=True, db_column='valueFloat', null=True)),
            ],
            options={
                'db_table': 'dgmTypeAttributes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dgmtypeeffects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('effectid', models.IntegerField(db_column='effectID')),
                ('isdefault', models.BooleanField(blank=True, db_column='isDefault', null=True)),
            ],
            options={
                'db_table': 'dgmTypeEffects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evegraphics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graphicid', models.IntegerField(db_column='graphicID')),
                ('soffactionname', models.CharField(blank=True, db_column='sofFactionName', max_length=100, null=True)),
                ('graphicfile', models.CharField(blank=True, db_column='graphicFile', max_length=100, null=True)),
                ('sofhullname', models.CharField(blank=True, db_column='sofHullName', max_length=100, null=True)),
                ('sofracename', models.CharField(blank=True, db_column='sofRaceName', max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'eveGraphics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Eveicons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iconid', models.IntegerField(db_column='iconID')),
                ('iconfile', models.CharField(blank=True, db_column='iconFile', max_length=500, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'eveIcons',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Eveunits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unitid', models.IntegerField(db_column='unitID')),
                ('unitname', models.CharField(blank=True, db_column='unitName', max_length=100, null=True)),
                ('displayname', models.CharField(blank=True, db_column='displayName', max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'eveUnits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('activityid', models.IntegerField(db_column='activityID')),
                ('time', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'industryActivity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivitymaterials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('materialtypeid', models.IntegerField(blank=True, db_column='materialTypeID', null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'industryActivityMaterials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivityprobabilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('producttypeid', models.IntegerField(blank=True, db_column='productTypeID', null=True)),
                ('probability', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'industryActivityProbabilities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivityproducts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('producttypeid', models.IntegerField(blank=True, db_column='productTypeID', null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'industryActivityProducts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivityraces',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('producttypeid', models.IntegerField(blank=True, db_column='productTypeID', null=True)),
                ('raceid', models.IntegerField(blank=True, db_column='raceID', null=True)),
            ],
            options={
                'db_table': 'industryActivityRaces',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryactivityskills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('skillid', models.IntegerField(blank=True, db_column='skillID', null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'industryActivitySkills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Industryblueprints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('maxproductionlimit', models.IntegerField(blank=True, db_column='maxProductionLimit', null=True)),
            ],
            options={
                'db_table': 'industryBlueprints',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invcategories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoryid', models.IntegerField(db_column='categoryID')),
                ('categoryname', models.CharField(blank=True, db_column='categoryName', max_length=100, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'invCategories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invcontrabandtypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factionid', models.IntegerField(db_column='factionID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('standingloss', models.TextField(blank=True, db_column='standingLoss', null=True)),
                ('confiscateminsec', models.TextField(blank=True, db_column='confiscateMinSec', null=True)),
                ('finebyvalue', models.TextField(blank=True, db_column='fineByValue', null=True)),
                ('attackminsec', models.TextField(blank=True, db_column='attackMinSec', null=True)),
            ],
            options={
                'db_table': 'invContrabandTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invcontroltowerresourcepurposes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purpose', models.IntegerField()),
                ('purposetext', models.CharField(blank=True, db_column='purposeText', max_length=100, null=True)),
            ],
            options={
                'db_table': 'invControlTowerResourcePurposes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invcontroltowerresources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('controltowertypeid', models.IntegerField(db_column='controlTowerTypeID')),
                ('resourcetypeid', models.IntegerField(db_column='resourceTypeID')),
                ('purpose', models.IntegerField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('minsecuritylevel', models.TextField(blank=True, db_column='minSecurityLevel', null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
            ],
            options={
                'db_table': 'invControlTowerResources',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invflags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flagid', models.IntegerField(db_column='flagID')),
                ('flagname', models.CharField(blank=True, db_column='flagName', max_length=200, null=True)),
                ('flagtext', models.CharField(blank=True, db_column='flagText', max_length=100, null=True)),
                ('orderid', models.IntegerField(blank=True, db_column='orderID', null=True)),
            ],
            options={
                'db_table': 'invFlags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invgroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupid', models.IntegerField(db_column='groupID')),
                ('categoryid', models.IntegerField(blank=True, db_column='categoryID', null=True)),
                ('groupname', models.CharField(blank=True, db_column='groupName', max_length=100, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('usebaseprice', models.BooleanField(blank=True, db_column='useBasePrice', null=True)),
                ('anchored', models.BooleanField(blank=True, null=True)),
                ('anchorable', models.BooleanField(blank=True, null=True)),
                ('fittablenonsingleton', models.BooleanField(blank=True, db_column='fittableNonSingleton', null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'invGroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invitems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('ownerid', models.IntegerField(db_column='ownerID')),
                ('locationid', models.IntegerField(db_column='locationID')),
                ('flagid', models.IntegerField(db_column='flagID')),
                ('quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'invItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invmarketgroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marketgroupid', models.IntegerField(db_column='marketGroupID')),
                ('parentgroupid', models.IntegerField(blank=True, db_column='parentGroupID', null=True)),
                ('marketgroupname', models.CharField(blank=True, db_column='marketGroupName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=3000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('hastypes', models.BooleanField(blank=True, db_column='hasTypes', null=True)),
            ],
            options={
                'db_table': 'invMarketGroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invmetagroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metagroupid', models.IntegerField(db_column='metaGroupID')),
                ('metagroupname', models.CharField(blank=True, db_column='metaGroupName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
            ],
            options={
                'db_table': 'invMetaGroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invmetatypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('parenttypeid', models.IntegerField(blank=True, db_column='parentTypeID', null=True)),
                ('metagroupid', models.IntegerField(blank=True, db_column='metaGroupID', null=True)),
            ],
            options={
                'db_table': 'invMetaTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invnames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemID')),
                ('itemname', models.CharField(db_column='itemName', max_length=200)),
            ],
            options={
                'db_table': 'invNames',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invpositions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemID')),
                ('x', models.TextField()),
                ('y', models.TextField()),
                ('z', models.TextField()),
                ('yaw', models.TextField(blank=True, null=True)),
                ('pitch', models.TextField(blank=True, null=True)),
                ('roll', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'invPositions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invtraits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('traitid', models.IntegerField(db_column='traitID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('skillid', models.IntegerField(blank=True, db_column='skillID', null=True)),
                ('bonus', models.TextField(blank=True, null=True)),
                ('bonustext', models.TextField(blank=True, db_column='bonusText', null=True)),
                ('unitid', models.IntegerField(blank=True, db_column='unitID', null=True)),
            ],
            options={
                'db_table': 'invTraits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invtypematerials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('materialtypeid', models.IntegerField(db_column='materialTypeID')),
                ('quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'invTypeMaterials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invtypereactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactiontypeid', models.IntegerField(db_column='reactionTypeID')),
                ('input', models.BooleanField()),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('quantity', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'invTypeReactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invtypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('groupid', models.IntegerField(blank=True, db_column='groupID', null=True)),
                ('typename', models.CharField(blank=True, db_column='typeName', max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('mass', models.TextField(blank=True, null=True)),
                ('volume', models.TextField(blank=True, null=True)),
                ('capacity', models.TextField(blank=True, null=True)),
                ('portionsize', models.IntegerField(blank=True, db_column='portionSize', null=True)),
                ('raceid', models.IntegerField(blank=True, db_column='raceID', null=True)),
                ('baseprice', models.TextField(blank=True, db_column='basePrice', null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
                ('marketgroupid', models.IntegerField(blank=True, db_column='marketGroupID', null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
                ('soundid', models.IntegerField(blank=True, db_column='soundID', null=True)),
                ('graphicid', models.IntegerField(blank=True, db_column='graphicID', null=True)),
            ],
            options={
                'db_table': 'invTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invuniquenames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemID')),
                ('itemname', models.CharField(db_column='itemName', max_length=200, unique=True)),
                ('groupid', models.IntegerField(blank=True, db_column='groupID', null=True)),
            ],
            options={
                'db_table': 'invUniqueNames',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invvolumes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('volume', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'invVolumes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapcelestialstatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('celestialid', models.IntegerField(db_column='celestialID')),
                ('temperature', models.TextField(blank=True, null=True)),
                ('spectralclass', models.CharField(blank=True, db_column='spectralClass', max_length=10, null=True)),
                ('luminosity', models.TextField(blank=True, null=True)),
                ('age', models.TextField(blank=True, null=True)),
                ('life', models.TextField(blank=True, null=True)),
                ('orbitradius', models.TextField(blank=True, db_column='orbitRadius', null=True)),
                ('eccentricity', models.TextField(blank=True, null=True)),
                ('massdust', models.TextField(blank=True, db_column='massDust', null=True)),
                ('massgas', models.TextField(blank=True, db_column='massGas', null=True)),
                ('fragmented', models.BooleanField(blank=True, null=True)),
                ('density', models.TextField(blank=True, null=True)),
                ('surfacegravity', models.TextField(blank=True, db_column='surfaceGravity', null=True)),
                ('escapevelocity', models.TextField(blank=True, db_column='escapeVelocity', null=True)),
                ('orbitperiod', models.TextField(blank=True, db_column='orbitPeriod', null=True)),
                ('rotationrate', models.TextField(blank=True, db_column='rotationRate', null=True)),
                ('locked', models.BooleanField(blank=True, null=True)),
                ('pressure', models.TextField(blank=True, null=True)),
                ('radius', models.TextField(blank=True, null=True)),
                ('mass', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mapCelestialStatistics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapconstellationjumps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromregionid', models.IntegerField(blank=True, db_column='fromRegionID', null=True)),
                ('fromconstellationid', models.IntegerField(db_column='fromConstellationID')),
                ('toconstellationid', models.IntegerField(db_column='toConstellationID')),
                ('toregionid', models.IntegerField(blank=True, db_column='toRegionID', null=True)),
            ],
            options={
                'db_table': 'mapConstellationJumps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapconstellations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regionid', models.IntegerField(blank=True, db_column='regionID', null=True)),
                ('constellationid', models.IntegerField(db_column='constellationID')),
                ('constellationname', models.CharField(blank=True, db_column='constellationName', max_length=100, null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('xmin', models.TextField(blank=True, db_column='xMin', null=True)),
                ('xmax', models.TextField(blank=True, db_column='xMax', null=True)),
                ('ymin', models.TextField(blank=True, db_column='yMin', null=True)),
                ('ymax', models.TextField(blank=True, db_column='yMax', null=True)),
                ('zmin', models.TextField(blank=True, db_column='zMin', null=True)),
                ('zmax', models.TextField(blank=True, db_column='zMax', null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
                ('radius', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mapConstellations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapdenormalize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemID')),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
                ('groupid', models.IntegerField(blank=True, db_column='groupID', null=True)),
                ('solarsystemid', models.IntegerField(blank=True, db_column='solarSystemID', null=True)),
                ('constellationid', models.IntegerField(blank=True, db_column='constellationID', null=True)),
                ('regionid', models.IntegerField(blank=True, db_column='regionID', null=True)),
                ('orbitid', models.IntegerField(blank=True, db_column='orbitID', null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('radius', models.TextField(blank=True, null=True)),
                ('itemname', models.CharField(blank=True, db_column='itemName', max_length=100, null=True)),
                ('security', models.TextField(blank=True, null=True)),
                ('celestialindex', models.IntegerField(blank=True, db_column='celestialIndex', null=True)),
                ('orbitindex', models.IntegerField(blank=True, db_column='orbitIndex', null=True)),
            ],
            options={
                'db_table': 'mapDenormalize',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapjumps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stargateid', models.IntegerField(db_column='stargateID')),
                ('destinationid', models.IntegerField(blank=True, db_column='destinationID', null=True)),
            ],
            options={
                'db_table': 'mapJumps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maplandmarks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('landmarkid', models.IntegerField(db_column='landmarkID')),
                ('landmarkname', models.CharField(blank=True, db_column='landmarkName', max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('locationid', models.IntegerField(blank=True, db_column='locationID', null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('iconid', models.IntegerField(blank=True, db_column='iconID', null=True)),
            ],
            options={
                'db_table': 'mapLandmarks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maplocationscenes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationid', models.IntegerField(db_column='locationID')),
                ('graphicid', models.IntegerField(blank=True, db_column='graphicID', null=True)),
            ],
            options={
                'db_table': 'mapLocationScenes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maplocationwormholeclasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationid', models.IntegerField(db_column='locationID')),
                ('wormholeclassid', models.IntegerField(blank=True, db_column='wormholeClassID', null=True)),
            ],
            options={
                'db_table': 'mapLocationWormholeClasses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapregionjumps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromregionid', models.IntegerField(db_column='fromRegionID')),
                ('toregionid', models.IntegerField(db_column='toRegionID')),
            ],
            options={
                'db_table': 'mapRegionJumps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapregions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regionid', models.IntegerField(db_column='regionID')),
                ('regionname', models.CharField(blank=True, db_column='regionName', max_length=100, null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('xmin', models.TextField(blank=True, db_column='xMin', null=True)),
                ('xmax', models.TextField(blank=True, db_column='xMax', null=True)),
                ('ymin', models.TextField(blank=True, db_column='yMin', null=True)),
                ('ymax', models.TextField(blank=True, db_column='yMax', null=True)),
                ('zmin', models.TextField(blank=True, db_column='zMin', null=True)),
                ('zmax', models.TextField(blank=True, db_column='zMax', null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
                ('radius', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mapRegions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapsolarsystemjumps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromregionid', models.IntegerField(blank=True, db_column='fromRegionID', null=True)),
                ('fromconstellationid', models.IntegerField(blank=True, db_column='fromConstellationID', null=True)),
                ('fromsolarsystemid', models.IntegerField(db_column='fromSolarSystemID')),
                ('tosolarsystemid', models.IntegerField(db_column='toSolarSystemID')),
                ('toconstellationid', models.IntegerField(blank=True, db_column='toConstellationID', null=True)),
                ('toregionid', models.IntegerField(blank=True, db_column='toRegionID', null=True)),
            ],
            options={
                'db_table': 'mapSolarSystemJumps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapsolarsystems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regionid', models.IntegerField(blank=True, db_column='regionID', null=True)),
                ('constellationid', models.IntegerField(blank=True, db_column='constellationID', null=True)),
                ('solarsystemid', models.IntegerField(db_column='solarSystemID')),
                ('solarsystemname', models.CharField(blank=True, db_column='solarSystemName', max_length=100, null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('xmin', models.TextField(blank=True, db_column='xMin', null=True)),
                ('xmax', models.TextField(blank=True, db_column='xMax', null=True)),
                ('ymin', models.TextField(blank=True, db_column='yMin', null=True)),
                ('ymax', models.TextField(blank=True, db_column='yMax', null=True)),
                ('zmin', models.TextField(blank=True, db_column='zMin', null=True)),
                ('zmax', models.TextField(blank=True, db_column='zMax', null=True)),
                ('luminosity', models.TextField(blank=True, null=True)),
                ('border', models.BooleanField(blank=True, null=True)),
                ('fringe', models.BooleanField(blank=True, null=True)),
                ('corridor', models.BooleanField(blank=True, null=True)),
                ('hub', models.BooleanField(blank=True, null=True)),
                ('international', models.BooleanField(blank=True, null=True)),
                ('regional', models.BooleanField(blank=True, null=True)),
                ('constellation', models.BooleanField(blank=True, null=True)),
                ('security', models.TextField(blank=True, null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
                ('radius', models.TextField(blank=True, null=True)),
                ('suntypeid', models.IntegerField(blank=True, db_column='sunTypeID', null=True)),
                ('securityclass', models.CharField(blank=True, db_column='securityClass', max_length=2, null=True)),
            ],
            options={
                'db_table': 'mapSolarSystems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapuniverse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('universeid', models.IntegerField(db_column='universeID')),
                ('universename', models.CharField(blank=True, db_column='universeName', max_length=100, null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('xmin', models.TextField(blank=True, db_column='xMin', null=True)),
                ('xmax', models.TextField(blank=True, db_column='xMax', null=True)),
                ('ymin', models.TextField(blank=True, db_column='yMin', null=True)),
                ('ymax', models.TextField(blank=True, db_column='yMax', null=True)),
                ('zmin', models.TextField(blank=True, db_column='zMin', null=True)),
                ('zmax', models.TextField(blank=True, db_column='zMax', null=True)),
                ('radius', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mapUniverse',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Planetschematics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schematicid', models.IntegerField(db_column='schematicID')),
                ('schematicname', models.CharField(blank=True, db_column='schematicName', max_length=255, null=True)),
                ('cycletime', models.IntegerField(blank=True, db_column='cycleTime', null=True)),
            ],
            options={
                'db_table': 'planetSchematics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Planetschematicspinmap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schematicid', models.IntegerField(db_column='schematicID')),
                ('pintypeid', models.IntegerField(db_column='pinTypeID')),
            ],
            options={
                'db_table': 'planetSchematicsPinMap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Planetschematicstypemap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schematicid', models.IntegerField(db_column='schematicID')),
                ('typeid', models.IntegerField(db_column='typeID')),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('isinput', models.BooleanField(blank=True, db_column='isInput', null=True)),
            ],
            options={
                'db_table': 'planetSchematicsTypeMap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ramactivities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityid', models.IntegerField(db_column='activityID')),
                ('activityname', models.CharField(blank=True, db_column='activityName', max_length=100, null=True)),
                ('iconno', models.CharField(blank=True, db_column='iconNo', max_length=5, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('published', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ramActivities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ramassemblylinestations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stationid', models.IntegerField(db_column='stationID')),
                ('assemblylinetypeid', models.IntegerField(db_column='assemblyLineTypeID')),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('stationtypeid', models.IntegerField(blank=True, db_column='stationTypeID', null=True)),
                ('ownerid', models.IntegerField(blank=True, db_column='ownerID', null=True)),
                ('solarsystemid', models.IntegerField(blank=True, db_column='solarSystemID', null=True)),
                ('regionid', models.IntegerField(blank=True, db_column='regionID', null=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineStations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ramassemblylinetypedetailpercategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assemblylinetypeid', models.IntegerField(db_column='assemblyLineTypeID')),
                ('categoryid', models.IntegerField(db_column='categoryID')),
                ('timemultiplier', models.TextField(blank=True, db_column='timeMultiplier', null=True)),
                ('materialmultiplier', models.TextField(blank=True, db_column='materialMultiplier', null=True)),
                ('costmultiplier', models.TextField(blank=True, db_column='costMultiplier', null=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypeDetailPerCategory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ramassemblylinetypedetailpergroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assemblylinetypeid', models.IntegerField(db_column='assemblyLineTypeID')),
                ('groupid', models.IntegerField(db_column='groupID')),
                ('timemultiplier', models.TextField(blank=True, db_column='timeMultiplier', null=True)),
                ('materialmultiplier', models.TextField(blank=True, db_column='materialMultiplier', null=True)),
                ('costmultiplier', models.TextField(blank=True, db_column='costMultiplier', null=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypeDetailPerGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ramassemblylinetypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assemblylinetypeid', models.IntegerField(db_column='assemblyLineTypeID')),
                ('assemblylinetypename', models.CharField(blank=True, db_column='assemblyLineTypeName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('basetimemultiplier', models.TextField(blank=True, db_column='baseTimeMultiplier', null=True)),
                ('basematerialmultiplier', models.TextField(blank=True, db_column='baseMaterialMultiplier', null=True)),
                ('basecostmultiplier', models.TextField(blank=True, db_column='baseCostMultiplier', null=True)),
                ('volume', models.TextField(blank=True, null=True)),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('mincostperhour', models.TextField(blank=True, db_column='minCostPerHour', null=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Raminstallationtypecontents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installationtypeid', models.IntegerField(db_column='installationTypeID')),
                ('assemblylinetypeid', models.IntegerField(db_column='assemblyLineTypeID')),
                ('quantity', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ramInstallationTypeContents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skinlicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('licensetypeid', models.IntegerField(db_column='licenseTypeID')),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('skinid', models.IntegerField(blank=True, db_column='skinID', null=True)),
            ],
            options={
                'db_table': 'skinLicense',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skinmaterials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skinmaterialid', models.IntegerField(db_column='skinMaterialID')),
                ('displaynameid', models.IntegerField(blank=True, db_column='displayNameID', null=True)),
                ('materialsetid', models.IntegerField(blank=True, db_column='materialSetID', null=True)),
            ],
            options={
                'db_table': 'skinMaterials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skins',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skinid', models.IntegerField(db_column='skinID')),
                ('internalname', models.CharField(blank=True, db_column='internalName', max_length=70, null=True)),
                ('skinmaterialid', models.IntegerField(blank=True, db_column='skinMaterialID', null=True)),
            ],
            options={
                'db_table': 'skins',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skinship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skinid', models.IntegerField(blank=True, db_column='skinID', null=True)),
                ('typeid', models.IntegerField(blank=True, db_column='typeID', null=True)),
            ],
            options={
                'db_table': 'skinShip',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Staoperations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityid', models.IntegerField(blank=True, db_column='activityID', null=True)),
                ('operationid', models.IntegerField(db_column='operationID')),
                ('operationname', models.CharField(blank=True, db_column='operationName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('fringe', models.IntegerField(blank=True, null=True)),
                ('corridor', models.IntegerField(blank=True, null=True)),
                ('hub', models.IntegerField(blank=True, null=True)),
                ('border', models.IntegerField(blank=True, null=True)),
                ('ratio', models.IntegerField(blank=True, null=True)),
                ('caldaristationtypeid', models.IntegerField(blank=True, db_column='caldariStationTypeID', null=True)),
                ('minmatarstationtypeid', models.IntegerField(blank=True, db_column='minmatarStationTypeID', null=True)),
                ('amarrstationtypeid', models.IntegerField(blank=True, db_column='amarrStationTypeID', null=True)),
                ('gallentestationtypeid', models.IntegerField(blank=True, db_column='gallenteStationTypeID', null=True)),
                ('jovestationtypeid', models.IntegerField(blank=True, db_column='joveStationTypeID', null=True)),
            ],
            options={
                'db_table': 'staOperations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Staoperationservices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operationid', models.IntegerField(db_column='operationID')),
                ('serviceid', models.IntegerField(db_column='serviceID')),
            ],
            options={
                'db_table': 'staOperationServices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Staservices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceid', models.IntegerField(db_column='serviceID')),
                ('servicename', models.CharField(blank=True, db_column='serviceName', max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'staServices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stastations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stationid', models.BigIntegerField(db_column='stationID', unique=True)),
                ('security', models.TextField(blank=True, null=True)),
                ('dockingcostpervolume', models.TextField(blank=True, db_column='dockingCostPerVolume', null=True)),
                ('maxshipvolumedockable', models.TextField(blank=True, db_column='maxShipVolumeDockable', null=True)),
                ('officerentalcost', models.IntegerField(blank=True, db_column='officeRentalCost', null=True)),
                ('operationid', models.IntegerField(blank=True, db_column='operationID', null=True)),
                ('stationtypeid', models.IntegerField(blank=True, db_column='stationTypeID', null=True)),
                ('corporationid', models.IntegerField(blank=True, db_column='corporationID', null=True)),
                ('solarsystemid', models.IntegerField(blank=True, db_column='solarSystemID', null=True)),
                ('constellationid', models.IntegerField(blank=True, db_column='constellationID', null=True)),
                ('regionid', models.IntegerField(blank=True, db_column='regionID', null=True)),
                ('stationname', models.CharField(blank=True, db_column='stationName', max_length=100, null=True)),
                ('x', models.TextField(blank=True, null=True)),
                ('y', models.TextField(blank=True, null=True)),
                ('z', models.TextField(blank=True, null=True)),
                ('reprocessingefficiency', models.TextField(blank=True, db_column='reprocessingEfficiency', null=True)),
                ('reprocessingstationstake', models.TextField(blank=True, db_column='reprocessingStationsTake', null=True)),
                ('reprocessinghangarflag', models.IntegerField(blank=True, db_column='reprocessingHangarFlag', null=True)),
            ],
            options={
                'db_table': 'staStations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stastationtypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stationtypeid', models.IntegerField(db_column='stationTypeID')),
                ('dockentryx', models.TextField(blank=True, db_column='dockEntryX', null=True)),
                ('dockentryy', models.TextField(blank=True, db_column='dockEntryY', null=True)),
                ('dockentryz', models.TextField(blank=True, db_column='dockEntryZ', null=True)),
                ('dockorientationx', models.TextField(blank=True, db_column='dockOrientationX', null=True)),
                ('dockorientationy', models.TextField(blank=True, db_column='dockOrientationY', null=True)),
                ('dockorientationz', models.TextField(blank=True, db_column='dockOrientationZ', null=True)),
                ('operationid', models.IntegerField(blank=True, db_column='operationID', null=True)),
                ('officeslots', models.IntegerField(blank=True, db_column='officeSlots', null=True)),
                ('reprocessingefficiency', models.TextField(blank=True, db_column='reprocessingEfficiency', null=True)),
                ('conquerable', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'staStationTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Translationtables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourcetable', models.CharField(db_column='sourceTable', max_length=200)),
                ('destinationtable', models.CharField(blank=True, db_column='destinationTable', max_length=200, null=True)),
                ('translatedkey', models.CharField(db_column='translatedKey', max_length=200)),
                ('tcgroupid', models.IntegerField(blank=True, db_column='tcGroupID', null=True)),
                ('tcid', models.IntegerField(blank=True, db_column='tcID', null=True)),
            ],
            options={
                'db_table': 'translationTables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trntranslationcolumns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tcgroupid', models.IntegerField(blank=True, db_column='tcGroupID', null=True)),
                ('tcid', models.IntegerField(db_column='tcID')),
                ('tablename', models.CharField(db_column='tableName', max_length=256)),
                ('columnname', models.CharField(db_column='columnName', max_length=128)),
                ('masterid', models.CharField(blank=True, db_column='masterID', max_length=128, null=True)),
            ],
            options={
                'db_table': 'trnTranslationColumns',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trntranslationlanguages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numericlanguageid', models.IntegerField(db_column='numericLanguageID')),
                ('languageid', models.CharField(blank=True, db_column='languageID', max_length=50, null=True)),
                ('languagename', models.CharField(blank=True, db_column='languageName', max_length=200, null=True)),
            ],
            options={
                'db_table': 'trnTranslationLanguages',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trntranslations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tcid', models.IntegerField(db_column='tcID')),
                ('keyid', models.IntegerField(db_column='keyID')),
                ('languageid', models.CharField(db_column='languageID', max_length=50)),
                ('text', models.TextField()),
            ],
            options={
                'db_table': 'trnTranslations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Warcombatzones',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('combatzoneid', models.IntegerField(db_column='combatZoneID')),
                ('combatzonename', models.CharField(blank=True, db_column='combatZoneName', max_length=100, null=True)),
                ('factionid', models.IntegerField(blank=True, db_column='factionID', null=True)),
                ('centersystemid', models.IntegerField(blank=True, db_column='centerSystemID', null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'warCombatZones',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Warcombatzonesystems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solarsystemid', models.IntegerField(db_column='solarSystemID')),
                ('combatzoneid', models.IntegerField(blank=True, db_column='combatZoneID', null=True)),
            ],
            options={
                'db_table': 'warCombatZoneSystems',
                'managed': False,
            },
        ),
    ]
